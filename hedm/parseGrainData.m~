function log = parseGrainData(pfname, qsym, varargin)
% NEED TO CHECK THE COORDINATE TRANSFORMATION!!!!
% parseGrainData Parse the hedm grain file
%   In the case of ff-HEDM, input file is from MIDAS grains.csv file.
%
%   log = parseGrainData(pfname, qsym) reads the grain log file
%   with the name fileName and returns the information in an array of
%   structures with fields:
%       nExpGvec = Number of expected G vectors
%       nMeasGvec = Number of measured G vectors
%       nMeasOnce = Number of G vectors measured once
%       nMeasMore = Number of G vectors measured more than once
%       meanIA = Average internal angle between prediced and measured
%       U = 3x3 Orientation matrix
%       gvec = G vector table
%       hkl = 3 hkl values
% 
%   The columns of the log file are:
%       Sp_ID O[0][0] O[0][1] O[0][2] O[1][0] O[1][1] O[1][2] O[2][0] O[2][1] O[2][2] 
%       X Y Z a b c alpha beta gamma Err1 Err2 Err3 MeanRadius Confidence 
%       
%       where each row describes a grain
%       
%       O[row][col] is the orientation matrix of the grain that takes crystal frame to
%       ESRF lab coordinate system. 
%       X,Y,Z define the center of mass coordinate of the grain in ESRF
%       lab coordinate system
%       a, b, c, alpha, beta, gamma are the crystal lattice
%       parameters of the grain (NEED TO DESCRIBE HOW THESE ARE DEFINED)
%       Err1, Err2, Err3
%       MeanRadius is the size of the grain
%       Confidence is the completeness of the grain (number of g-vectors
%       found / number of g-vectors anticipated)
%
%   In the case of nf-HEDM, input file is from Ice9 file postprocessed with
%   segmentation routine. This functionality was originally provided by
%   Dave Menasche at Carnegie Mellon University.
%
%   The columns of the input file are:
%       grain id
%       Center of mass (x = along beam, y = OB, z = up)
%       Average Orientation in Bunge convention that transforms a vector
%       in crystal frame to the laboratory frame
%       Volume 
%       AverageConfidence (bug in the segmentation routine) 
%       NumberNeighbors
%       IDsofNeighbors
%       MisorsWithNeighbors
%
%   INPUT:
%
%   pfname
%       full file path of the grain log file generated by ff-HEDM code
%
%   qsym 
%       Symmetry operators in quaternions
%
%   These arguments can be followed by a list of
%   parameter/value pairs. Options are:
%
%   'Technique'     far-field (ff) or near-field (nf). default is ff.
%   'CrdSystem'     coordinate system in the log file (default is APS)
%
%   OUTPUT:
%   
%   log
%       content of the grain log file organized into structure array
% 
%   Example:
%     log = parseGrainData(pfname);

% default options
optcell = {...
    'Technique', 'ff-midas', ...
    'CrdSystem', 'APS', ...
    'LabToSample', 0, ...
    'C_xstal', nan, ...
    };

% update option
opts    = OptArgs(optcell, varargin);

if strcmpi(opts.CrdSystem, 'APS')
    disp('COM / orientations / strains will be converted to the APS coordinate system')
elseif strcmpi(opts.CrdSystem, 'ESRF')
    disp('COM / orientations / strains will be in the ESRF coordinate system')
else
    disp('Unknown coordinate system')
    return
end
   
if strcmpi(opts.CrdSystem, 'APS')
    R_ESRF2APS  = RMatOfQuat(QuatOfESRF2APS);
else
    R_ESRF2APS  = eye(3,3);
end

if (opts.LabToSample == 0)
    disp(sprintf('The LAB FRAME and SAMPLE FRAME are IDENTICAL WHEN OMEGA = %2.1f deg', opts.LabToSample))
elseif (opts.LabToSample ~= 0) 
    disp(sprintf('The LAB FRAME and SAMPLE FRAME are IDENTICAL WHEN OMEGA = %2.1f deg', opts.LabToSample))
end
c   = cosd(opts.LabToSample);
s   = sind(opts.LabToSample);
RLab2Sam    = [
    c 0 -s; ...
    0 1 0; ...
    s 0 c; ...
    ];

if strcmpi(opts.Technique, 'ff-midas')
    disp(sprintf('parsing ff-hedm data from %s', pfname));
    
    A    = load(pfname);
    nGrains = size(A, 1);
    nCols   = size(A, 2);
    
    % Loop over found grains
    log(nGrains) = struct(...
        'GrainID',[], ...
        'R',[], 'quat',[], 'rod',[], ...
        'COM',[], ...
        'lattprms',[], ...
        'DiffPos',[], 'DiffOme',[], 'DiffAngle',[], ...
        'GrainRadius',[], ...
        'Completeness',[], ...
        'StrainFab',[], 'Strain',[], ...
        'PhaseNumber',[], ...
        'V',[],'Esam',[],'Ecry',[],'F',[], ...
        'ReflectionTable', [],  'CrdSys', []);
    
    % ROTATION FROM MIDAS IS [R]{c} = {l}
    % ROTATOIN TO GO FROM LAB TO SAMPLE IS [RLab2Sam]{l} = {s}
    % [RLab2Sam][R]{c} = [RLab2Sam]{l} = {s}
    for i = 1:1:nGrains
        RMat    = reshape(A(i, 2:10), 3, 3)';
        COM     = A(i, 11:13);
        
        % COORDINATE TRANSFORMATION
        RMat    = RLab2Sam*R_ESRF2APS*RMat;
        COM     = RLab2Sam*R_ESRF2APS*COM';
        
        if strcmpi(opts.CrdSystem, 'APS')
            log(i).CrdSys   = 'APS';
        elseif strcmpi(opts.CrdSystem, 'ESRF')
            log(i).CrdSys   = 'ESRF';
        end
        Quat    = ToFundamentalRegionQ(QuatOfRMat(RMat), qsym);
        Rod     = RodOfQuat(Quat);
        
        log(i).GrainID  = A(i,1);
        log(i).R    = RMat;
        log(i).rod  = Rod;
        log(i).quat = Quat;
        log(i).COM  = COM(:);
        
        log(i).lattprms     = A(i, 14:19)';
        log(i).DiffPos      = A(i, 20);
        log(i).DiffOme      = A(i, 21);
        log(i).DiffAngle    = A(i, 22);
        log(i).GrainRadius  = A(i, 23);
        log(i).Completeness = A(i, 24);
        
        StrainFab   = reshape(A(i, 25:33), 3, 3);
        Strain      = reshape(A(i, 34:42), 3, 3);
        log(i).StrainFab    = RLab2Sam*R_ESRF2APS*StrainFab*R_ESRF2APS'*RLab2Sam';
        log(i).Strain       = RLab2Sam*R_ESRF2APS*Strain*R_ESRF2APS'*RLab2Sam';
        
        if isnan(opts.C_xstal)
            log(i).StressFab    = nan(3,3);
            log(i).Stress       = nan(3,3);
        elseif (size(opts.C_xstal,1) == 6) && (size(opts.C_xstal,2) == 6)
            %%% STRAIN IS IN SAMPLE FRAME
            R   = RLab2Sam*R_ESRF2APS; % [R]{c}={s}
            T   = VectorizedCOBMatrix(R);
            C   = T*opts.C_xstal*T';  % XSTAL STIFFNESS IN SAMPLE FRAME
            
            %%% FAB
            StrainFab_vec       = VecOfStressStrainInVM(log(i).StrainFab);
            StressFab_vec       = C*StrainFab_vec;
            log(i).StressFab    = MatrixOfStressStrainInVM(StressFab_vec)
            
            %%% PK
            StrainFab_vec       = VecOfStressStrainInVM(log(i).Strain);
            StressFab_vec       = C*StrainFab_vec;
            log(i).StressFab    = MatrixOfStressStrainInVM(StressFab_vec)
        end
        log(i).StrainRMS    = A(i, 43);
        
        %%% THIS IS FOR NEWER VERSION OF THE GRAINS OUTPUT
        if nCols > 43
            log(i).PhaseNumber  = A(i, 44);
        end
    end
elseif strcmpi(opts.Technique, 'nf')
    disp(sprintf('parsing nf-hedm data from %s', pfname));
    
    fid = fopen(pfname);
    tline = fgetl(fid);
    counter = 1;
    
    while ischar(tline)
        A	= sscanf( tline , '%f', 10)';
        
        COM	= A(2:4);
        %%% THIS IS Bunge Angles GOING FROM LAB TO CRYSTAL
        BungeAngles = A(5:7)';
        %%% CONVERTS BUNGE ANGLES TO ROT MATRIX THEN TRANSPOSE TO CHANGE
        %%% ITS MEANING TO "CRYSATL TO LAB"
        RMat    = RMatOfBunge(BungeAngles, 'degrees')';
        
        RMat    = R_ESRF2APS*RMat;
        COM     = R_ESRF2APS*COM';
        Quat    = ToFundamentalRegionQ(QuatOfRMat(RMat), qsym);
        
        if strcmpi(opts.CrdSystem, 'APS')
            log(counter).CrdSys	= 'APS';
        elseif strcmpi(opts.CrdSystem, 'ESRF')
            log(counter).CrdSys	= 'ESRF';
        end
        
        log(counter).BungeAngles    = BungeAngles;
        log(counter).RMat           = RMat;
        log(counter).Quat           = Quat;
        log(counter).COM            = COM(:);
        
        log(counter).Volume       = A(8);
        log(counter).Confidence   = A(9);
        
        log(counter).NumNeighbors	= A(10);
        
        B   = sscanf(tline,'%f',10+2*A(10));
        log(counter).IDofNeighbors      = B(11:11+A(10)-1);
        log(counter).MisWithNeighbors   = B(11+A(10):end);
        tline = fgetl(fid);
        counter = counter+1;
    end
    fclose(fid);
end